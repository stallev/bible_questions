// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∞–Ω–∏—Ç–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram ---
function sanitizeInput(input) {
  if (typeof input !== 'string') return '';
  return input
      .trim()
      .replace(/[<>]/g, '') // –£–¥–∞–ª—è–µ–º < –∏ >
      .replace(/[\u0000-\u001F\u007F-\u009F]/g, '') // –£–¥–∞–ª—è–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã
      .replace(/&/g, '&amp;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#x27;')
      .replace(/\//g, '&#x2F;');
}

function sanitizePhone(phone) {
  if (typeof phone !== 'string') return '';
  // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –ø–ª—é—Å
  let cleaned = phone.replace(/[^0-9+]/g, '');
  // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–ª—é—Å–æ–≤, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π
  if (cleaned.startsWith('+')) {
      cleaned = '+' + cleaned.slice(1).replace(/\+/g, '');
  } else {
      cleaned = cleaned.replace(/\+/g, '');
  }
  return cleaned;
}

function sendDataToTelegram(message) {
  const botToken = "7536370506:AAEPOydxeenoerj2vvf4IMNMwWL690nWTMI";
  const chatId = "-1001563047379";
  const apiUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;
  const params = {
      chat_id: chatId,
      text: message,
      parse_mode: 'HTML'
  };
  return fetch(apiUrl, {
      method: 'POST',
      headers: {
          'Content-Type': 'application/json',
      },
      body: JSON.stringify(params)
  }).then(response => response.json());
}

async function handleFormData(data, form) {
  // –°–∞–Ω–∏—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  const sanitizedData = {
    message: sanitizeInput(data.message)
  };

  const message = `\nüì© –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:\n<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> ${sanitizedData.message}`;
  console.log('message', message);

  const successDiv = document.getElementById('form-success');
  const errorDiv = document.getElementById('form-error');
  if (successDiv) successDiv.style.display = 'none';
  if (errorDiv) errorDiv.style.display = 'none';

  try {
      const result = await sendDataToTelegram(message);
      console.log('result', result);
      if (result.ok) {
          if (successDiv) successDiv.style.display = 'block';
          form.reset();
      } else {
          if (errorDiv) errorDiv.style.display = 'block';
      }
  } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã:', error);
      if (errorDiv) errorDiv.style.display = 'block';
  }
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã ---
const orderForm = document.getElementById('orderForm');
if (orderForm) {
  orderForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(orderForm);
    const data = Object.fromEntries(formData.entries());
    await handleFormData(data, orderForm);
  });
}

// --- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã textarea ---
const textarea = document.getElementById('message');
if (textarea) {
  textarea.addEventListener('input', function () {
    this.style.height = 'auto';
    this.style.height = (this.scrollHeight) + 'px';
  });
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç)
  textarea.style.overflow = 'hidden';
  textarea.style.height = textarea.scrollHeight + 'px';
}
