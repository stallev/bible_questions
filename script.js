// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∞–Ω–∏—Ç–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram ---
function sanitizeInput(input) {
  if (typeof input !== 'string') return '';
  return input
      .trim()
      .replace(/[<>]/g, '') // –£–¥–∞–ª—è–µ–º < –∏ >
      .replace(/[\u0000-\u001F\u007F-\u009F]/g, '') // –£–¥–∞–ª—è–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã
      .replace(/&/g, '&amp;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#x27;')
      .replace(/\//g, '&#x2F;');
}

function sanitizePhone(phone) {
  if (typeof phone !== 'string') return '';
  // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –ø–ª—é—Å
  let cleaned = phone.replace(/[^0-9+]/g, '');
  // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–ª—é—Å–æ–≤, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π
  if (cleaned.startsWith('+')) {
      cleaned = '+' + cleaned.slice(1).replace(/\+/g, '');
  } else {
      cleaned = cleaned.replace(/\+/g, '');
  }
  return cleaned;
}

function sendDataToTelegram(message) {
  const botToken = "7311009873:AAEzy-c1HrbXlvmcOJxCnDeyUZN0ApIzypE";
  const chatId = "-4914480902";
  const apiUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;
  const params = {
      chat_id: chatId,
      text: message,
      parse_mode: 'HTML'
  };
  return fetch(apiUrl, {
      method: 'POST',
      headers: {
          'Content-Type': 'application/json',
      },
      body: JSON.stringify(params)
  }).then(response => response.json());
}

async function handleFormData(data, form) {
  // –°–∞–Ω–∏—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  const sanitizedData = {
    message: sanitizeInput(data.message)
};

const message = `\nüì© –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:\n<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> ${sanitizedData.message}`;
console.log('message', message);

try {
    const result = await sendDataToTelegram(message);
    console.log('result', result);
    if (result.ok) {
        alert('–°–ø–∞—Å–∏–±–æ! –í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
        closeModal();
        form.reset();
    } else {
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
    }
} catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã:', error);
    alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
}
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã ---
orderForm.addEventListener('submit', async (e) => {
  e.preventDefault();

  const formData = new FormData(orderForm);
  const data = Object.fromEntries(formData.entries());
  
  await handleFormData(data, orderForm);
});
